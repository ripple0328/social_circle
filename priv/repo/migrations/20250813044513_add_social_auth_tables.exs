defmodule SocialCircle.Repo.Migrations.AddSocialAuthTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :text, null: false
      add :provider, :text, null: false
      add :provider_id, :text, null: false
      add :name, :text
      add :avatar_url, :text
      add :raw_data, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:provider, :provider_id],
             name: "users_unique_provider_account_index"
           )

    create table(:linked_providers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :provider, :text, null: false
      add :provider_id, :text, null: false
      add :avatar_url, :text
      add :raw_data, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "linked_providers_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:linked_providers, [:provider, :provider_id],
             name: "linked_providers_unique_linked_provider_index"
           )
  end

  def down do
    drop_if_exists unique_index(:linked_providers, [:provider, :provider_id],
                     name: "linked_providers_unique_linked_provider_index"
                   )

    drop constraint(:linked_providers, "linked_providers_user_id_fkey")

    drop table(:linked_providers)

    drop_if_exists unique_index(:users, [:provider, :provider_id],
                     name: "users_unique_provider_account_index"
                   )

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
